
setTimeout()
x초 후에 코드를 실행한다.
setTimeout(function(), 기다릴 시간);
시간은 ms 단위로 적으면 된다. (1초 == 1000)

ex)
setTimeout(function{
    console.log('hi')
    }, 1000);
1초 후 hi를 출력한다.

setInterval(function(), 기다릴 시간);
x초 마다 함수를 실행시켜준다.

문자검사하는 방법
'문자'.include('찾을단어');
아무 문자 뒤에 .include()를 붙인다.
하지만 구체적인 검사는 할 수 없다.

정규표현식 /.../
/abc/ 라고 입력하면 abc라는 단어가 있는지 확인한다.
/.../.test('정규표현식으로 검사할 문자');
/abc/.test('abcdef');
abcdef에 abc가 있나 true/false 출력을 한다.

[] 기호로 문자 범위를 지정한다.
[a-z] a부터 z까지 아무문자 '하나' 를 의미
ex: /[a-z]/.test('aefg');
a부터 z까지 아무 문자 하나가 aefg에 포함되어있나? true/false로 출력

/\S/ 특수문자 포함 아무 문자 '하나'
/^a/ a로 시작하는지
/a$/ a로 끝나는지
/(a|f)/ a또는 f가 포함되는지
/a+/ a를 반복해서 찾아준다.

/\S+t/ 모든 문자 여러개 다음 t라는 글자가 있는지
ex: aaaat, bbt 등

이메일 정규식
/\S+@\S+\.\S+/

소수점 오차 해결하는 방법
1. 덧셈하기 전에 10 곱해서 덧샘 후 10으로 나누기
2. 외부 라이브러리 사용
3. 오차는 무시해도 된다, 반올림 한다.

반올림하기
숫자.toFixed(num);
숫자를 소수점 num 번 째 자리까지 반올림해서
'문자'로 반환한다.
'123'과 123은 다른 데이터다!

parseInt() -> 정수
parseFloat() -> 실수
두 함수는 문자를 숫자로 변환한다.

스크롤 이벤트리스너
스크롤바를 조작하면 scroll 이벤트가 발생한다.
전체 페이지를 스크롤 할 때마다 원하는 코드를 실행할 수 있다.
window.addEventListener('scroll', function(){
    console.log("안녕!");
})

# document와 window는 같은 의미이다. (window가 좀더 큰 의미)
scroll 에서는 관습상 window 사용

window.scrollY
현재 페이지를 얼마나 위에서 부터 스크롤했는지 px단위로 알려준다.
scrollX도 있다.

window.scrollTo(0, 100);
강제로 스크롤바를 움직인다.
위에서부터 100px 위치로 스크롤해준다.

window.scrollBy(0, 100)
현재 위치에서부터 스크롤해준다.
현재 위치에서부터 +100px 만큼 스크롤해준다.

jquery로는 더 짧게 구현 가능
$(window).on('scroll', function(){
    $(window).scrollTop();
})
현재 스크롤 양을 알려준다.

div 박스 높이 구하는 방법

scrollHeight; -> 스크롤가능한 총 높이
clientHeight; -> 박스가 화면에 보이는 부분 높이

scrollHeight = scrollTop + clientHeight
대충 여기서 +_ 하면 된다.

이벤트 버블링
어떤 html 태그에 이벤트가 발생하면 그의 모든 상위요소까지
이벤트가 실행된다.
이를 방지하기 위해 콜백함수에 파라미터를 추가해서 옵션을 설정한다.

e.target 실제 클릭한 요소를 알려준다.
e.currentTarget 지금 이벤트리스너가 달린 곳을 알려줌
(this 라고 써도 똑같음)
e.preventDefault() 이벤트 기본 동작을 막아줌
e.stopPropagation() 내 상위 요소로의 이벤트버블링을 중단

여기서 중요한건 e.target인데 
이벤트 버블링이 일어난다고 해도
사용자가 실제로 클릭한 그 요소는 
저 문법으로 찾아낼 수 있다는걸 기억하자



쓸만한 라이브러리 추천
1. Swiper
캐러셀 (이미지슬라이드되는거) 만들고 싶으면 직접 코드 짜도 되겠지만
좀 이쁘게 아니면 쉽게 여러기능을 만들고 싶으면 Swiper 라이브러리 써도 됩니다.
호환 잘되고 이미지 lazy loading 이런 것도 되고 터치/드래그도 됩니다.
2. Chart.js 
웹페이지에 차트만들고 싶으면 씁니다.
실제 서비스면 관리자, admin 페이지 만들 때도 많을텐데 거기서 통계를 이쁘게 보여줄 때 유용하겠군요.
div 박스에 css 스타일 넣어서 그래프만들고 그림그리고 해도 되겠지만 그럴 바엔 저거 쓰는게 낫습니다. 
코인거래소 같은 곳에는 더 프로페셔널한 유료 차트라이브러리 같은걸 쓰기도 합니다. 
3. Animate On Scroll
스크롤 내리면 요소가 서서히 등장하는 애니메이션을 만들고 싶을 때 쓰면 좋습니다.
유저가 스크롤바를 ... div 박스 현재 y좌표만큼 내리면 애니메이션 보여달라고 코드짜면 되긴 하는데 귀찮으니까요 
https://github.com/michalsnik/aos
여기서 css파일, js 파일 cdn버전 찾아서 html 파일에 넣고
그 다음에 밑에 <script> 태그 열어서 
<script>
  AOS.init();
</script>
이러면 설치 끝이라는군요 
4. EmailJS
원래 이메일 전송은 서버가 해야하지만 Gmail 이런거 서버를 잠깐 빌리면
자바스크립트만으로 이메일 전송이 가능합니다. 
유저가 내 이메일 계정으로 이메일 전송도 가능하고 
내 이메일 계정으로 남에게 이메일 전송도 가능함 
5. Lodash
array, object, 문자, 숫자 자료를 다루기 편해지는 기본함수들을 제공해줍니다.
예를 들어서 array 자료에 있는 마음에 안드는 'a' 라는 문자를 제거하고 싶으면
직접 반복문 돌리거나 filter 함수 쓰거나 그러면 되는건데 
Lodash 설치해놨으면 그냥 _.pull(어레이자료, 'a'); 쓰면 됩니다. 
7. Fullpage.js
웹페이지를 PPT처럼 만들어줍니다.
버튼누르면 다음 슬라이드보여주는데 하지만 이런 UI는 유행이 지났습니다.
상업적 이용은 아마 유료임 
https://alvarotrigo.com/fullPage/
이건 동작예시